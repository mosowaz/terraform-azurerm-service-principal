stages:
- stage: Build_${{parameters.infrastructure}}
  displayName: 'tf Plan'
  pool: $(Pipeline_Agent)
  
  jobs:
  - job: plan_scan_publish
    timeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - checkout: self
      clean: true
      
    - template: installs.yml

    - bash: |
        set -exo pipefail 
        terraform init -upgrade -input=false '-lock-timeout=2s' \
          -backend-config="resource_group_name=$(RGName)" \
          -backend-config="storage_account_name=$(StorageAccName)" \
          -backend-config="container_name=$(ContainerName)" \
          -backend-config="key=${{parameters.BlobName}}" \
          -backend-config="use_azuread_auth=true"
        terraform validate
        terraform plan -out='${{parameters.tfplan}}' '-lock-timeout=10s' -input=false \
          '-var-file=terraform.tfvars'        
      env:
        ARM_CLIENT_ID: $(SPN2-client-id)
        ARM_TENANT_ID: $(SPN2-tenant-id)
        ARM_CLIENT_SECRET: $(SPN2-client-secret)
        ARM_SUBSCRIPTION_ID: $(SPN2-subscription-id)
        TF_VAR_my_publicIP: $(my_publicIP)
      workingDirectory: ${{parameters.TerraformDirectory}}
      displayName: 'terraform init, validate and plan'
      continueOnError: false
      
      # scan for vulberability and put the result in TestResultsDirectory
    - bash: |
        checkov --dir . \
          --output sarif \
          --quiet \
          --deep-analysis \
          --skip-check $(SKIPPED_CHECKS) \
          --enable-secret-scan-all-files \
          --download-external-modules true \
          --framework terraform,azure_pipelines,secrets \
          --output-file-path $(common.TestResultsDirectory)
      displayName: 'code scanning with checkov'
      workingDirectory: ${{parameters.TerraformDirectory}}
      continueOnError: false

    - bash: touch tfsec.sarif
      displayName: 'create tfsec.sarif file for upcoming step'
      workingDirectory: $(common.TestResultsDirectory)
 
    - task: tfsec@1
      inputs:
        version: v1.28.13
        debug: true
        publishTestResults: true
        args: --format sarif --debug --soft-fail --concise-output --out $(common.TestResultsDirectory)/tfsec.sarif
        dir: '${{parameters.TerraformDirectory}}'
      displayName: 'code scanning with tfsec'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '${{parameters.TerraformDirectory}}'
        artifact: '${{parameters.tfplan}}-artifact' # artifactName
        publishLocation: 'pipeline' # upload artifact to pipeline
      displayName: 'Publish tfplan artifact'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(common.TestResultsDirectory)'
        artifact: 'TestResults' # vulnerability results published
        publishLocation: 'pipeline' # upload artifact to pipeline
      displayName: 'Publish TestResults'